{"version":3,"sources":["logo.svg","components/form.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","MyForm","react_default","a","createElement","action","method","encType","name","type","accept","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","canApply","className","src","logo","alt","Component","Boolean","window","location","hostname","match","ReactDOM","render","react_router_dom","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,0PCEjC,SAASC,IACZ,OACIC,EAAAC,EAAAC,cAAA,QAAMC,OAAO,mBAAmBC,OAAO,OAAOC,QAAQ,oBAAoBC,KAAK,YAC3EN,EAAAC,EAAAC,cAAA,mFAGAF,EAAAC,EAAAC,cAAA,2BAEIF,EAAAC,EAAAC,cAAA,SAAOI,KAAK,QAAQC,KAAK,UAE7BP,EAAAC,EAAAC,cAAA,wBAEIF,EAAAC,EAAAC,cAAA,SAAOI,KAAK,QAAQC,KAAK,UAE7BP,EAAAC,EAAAC,cAAA,6BAEIF,EAAAC,EAAAC,cAAA,SAAOI,KAAK,QAAQC,KAAK,SAE7BP,EAAAC,EAAAC,cAAA,8BAEIF,EAAAC,EAAAC,cAAA,SAAOI,KAAK,QAAQC,KAAK,UAE7BP,EAAAC,EAAAC,cAAA,6BAEIF,EAAAC,EAAAC,cAAA,YAAUI,KAAK,WAEnBN,EAAAC,EAAAC,cAAA,yBAEIF,EAAAC,EAAAC,cAAA,SAAOK,KAAK,MAAMD,KAAK,WAAWE,OAAO,cAE7CR,EAAAC,EAAAC,cAAA,uBAEIF,EAAAC,EAAAC,cAAA,SAAOK,KAAK,OAAOD,KAAK,SAASE,OAAO,kBAE5CR,EAAAC,EAAAC,cAAA,UAAQK,KAAK,UAAb,qBCCGE,cA7Bb,SAAAA,EAAYC,GAAY,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACtBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAHRQ,MAAQ,CAAEC,UAAU,GAEIR,wEAKtB,OACEX,EAAAC,EAAAC,cAAA,OAAKkB,UAAU,OACbpB,EAAAC,EAAAC,cAAA,UAAQkB,UAAU,cAChBpB,EAAAC,EAAAC,cAAA,OAAKmB,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCvB,EAAAC,EAAAC,cAAA,6CAGAF,EAAAC,EAAAC,cAAA,8BAEFF,EAAAC,EAAAC,cAAA,eACGY,KAAKI,MAAMC,SACVnB,EAAAC,EAAAC,cAACH,EAAD,MAEEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,yCAtBEsB,mBCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO/B,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,KAAehC,EAAAC,EAAAC,cAAC+B,EAAD,OAAyBC,SAASC,eAAe,SDiI1E,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e8c7ab6f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\n\r\nexport function MyForm() {\r\n    return (\r\n        <form action='/form_submit.php' method=\"post\" encType='mutipart/formdata' name='userform'>\r\n            <p>\r\n                Enter your details below to apply for the role of a software engineer.\r\n            </p>\r\n            <label>\r\n                First name:\r\n                <input name='fname' type='text' />\r\n            </label>\r\n            <label>\r\n                Surname:\r\n                <input name='lname' type='text' />\r\n            </label>\r\n            <label>\r\n                Phone number:\r\n                <input name='phone' type='tel' />\r\n            </label>\r\n            <label>\r\n                Email address:\r\n                <input name='email' type='mail' />\r\n            </label>\r\n            <label>\r\n                Cover letter:\r\n                <textarea name='cover' />\r\n            </label>\r\n            <label>\r\n                Passport:\r\n                <input type='img' name='passport' accept='jpg,jpeg' />\r\n            </label>\r\n            <label>\r\n                Resume:\r\n                <input type='file' name='resume' accept='pdf,doc,docx' />\r\n            </label>\r\n            <button type='submit'>\r\n                Submit\r\n            </button>\r\n        </form>\r\n    )\r\n}\r\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport { MyForm } from \"./components/form\";\nimport './App.css';\n\nclass App extends Component<any,any> {\n  state = { canApply: false };\n\n  constructor(props: any) {\n    super(props)\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Welcome to Adio Consulting Group\n          </p>\n          <button>Admin Login</button>\n        </header>\n        <section>\n          {this.state.canApply ? (\n            <MyForm />\n          ) : (\n              <div>\n                <p>Application Closed</p>\n              </div>\n            )\n          }\n        </section>\n      </div>\n    );\n  }\n}\n  \nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from \"react-router-dom\";\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\n//@ts-ignore\nReactDOM.render(<BrowserRouter><App /></BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}