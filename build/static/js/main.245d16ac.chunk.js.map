{"version":3,"sources":["logo.svg","lib.ts","components/form.tsx","components/admin.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","library","host","fetch","this","method","redirect","credentials","response","json","JSON","parse","success","form","body","then","alert","app","data","firstName","fname","lastName","lname","phone","email","coverLetter","cover","passport","resume","MyForm","props","react_default","a","createElement","id","onSubmit","e","preventDefault","stopPropagation","lib","submitApplication","FormData","document","getElementById","action","encType","name","type","accept","Login","React","onLogin","login","AdminView","applications","map","concat","src","alt","href","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","canApply","isAdmin","showAdminLogin","_this2","can","setState","_this3","className","logo","onClick","getApplications","check","Component","Boolean","window","location","hostname","match","ReactDOM","render","react_router_dom","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.245d16ac.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","class lib {\r\n    host = 'localhost';\r\n\r\n    async canApply(): Promise<boolean> {\r\n        let response = await fetch(this.host + '/admin.php?w=cando', {\r\n            method: 'get',\r\n            redirect: 'follow',\r\n            credentials: 'include'\r\n        })\r\n        let json = await response.json()\r\n        let res = JSON.parse(json)\r\n        if (res.success) {\r\n            return true\r\n        } else {\r\n            return false\r\n        }\r\n    }\r\n\r\n    submitApplication(form: FormData) {\r\n        fetch(this.host + '/form_submit.php', {\r\n            body: form,\r\n            method: 'POST',\r\n            redirect: 'follow',\r\n            credentials: 'include'\r\n        }).then(response => {\r\n            return response.json()\r\n        }).then(json => {\r\n            let res = JSON.parse(json)\r\n            if (res.success) {\r\n                alert('Application Submitted')\r\n                return true\r\n            } else {\r\n                alert('An error occurred while submitting application')\r\n                return false\r\n            }\r\n        })\r\n    }\r\n\r\n    getApplications() {\r\n        fetch(this.host + '/admin.php?w=get', {\r\n            method: 'GET',\r\n            redirect: 'follow',\r\n            credentials: 'include'\r\n        }).then(response => {\r\n            return response.json()\r\n        }).then(json => {\r\n            let res = JSON.parse(json)\r\n            if (res.success) {\r\n                let app: any = {}\r\n                let data = json.data\r\n                app.firstName = data.fname\r\n                app.lastName = data.lname\r\n                app.phone = data.phone\r\n                app.email = data.email\r\n                app.coverLetter = data.cover\r\n                app.passport = data.passport\r\n                app.resume = data.resume\r\n                return app\r\n            } else {\r\n                return false\r\n            }\r\n        })\r\n    }\r\n\r\n    login(form: FormData) {\r\n        fetch(this.host + '/admin.php?w=login', {\r\n            body: form,\r\n            method: 'POST',\r\n            redirect: 'follow',\r\n            credentials: 'include'\r\n        }).then(response => {\r\n            return response.json()\r\n        }).then(json => {\r\n            let res = JSON.parse(json)\r\n            if (res.success) {\r\n                return true\r\n            } else {\r\n                return false\r\n            }\r\n        })\r\n    }\r\n\r\n}\r\n\r\nconst library = new lib()\r\n\r\nexport default library;","import React, { Component } from 'react';\r\nimport lib from \"../lib\";\r\n\r\nexport function MyForm(props: any) {\r\n    return (\r\n        <form id='appform' onSubmit={(e) => {\r\n            e.preventDefault();\r\n            e.stopPropagation(); \r\n            lib.submitApplication(new FormData(document.getElementById('appform') as HTMLFormElement))\r\n            props.onSubmit()\r\n        }} action='/form_submit.php' method=\"post\" encType='mutipart/form-data' name='userform'>\r\n            <p>\r\n                Enter your details below to apply for the role of a software engineer.\r\n            </p>\r\n            <label>\r\n                First name:\r\n                <input name='fname' type='text' />\r\n            </label>\r\n            <label>\r\n                Surname:\r\n                <input name='lname' type='text' />\r\n            </label>\r\n            <label>\r\n                Phone number:\r\n                <input name='phone' type='tel' />\r\n            </label>\r\n            <label>\r\n                Email address:\r\n                <input name='email' type='mail' />\r\n            </label>\r\n            <label>\r\n                Cover letter:\r\n                <textarea name='cover' />\r\n            </label>\r\n            <label>\r\n                Passport:\r\n                <input type='img' name='passport' accept='jpg,jpeg' />\r\n            </label>\r\n            <label>\r\n                Resume:\r\n                <input type='file' name='resume' accept='pdf,doc,docx' />\r\n            </label>\r\n            <button type='submit'>\r\n                Submit\r\n            </button>\r\n        </form>\r\n    )\r\n}\r\n","import library from \"../lib\";\r\n\r\nexport function Login(props: any) {\r\n    return (\r\n        <form id='login' onSubmit={(e) => {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n            props.onLogin(library.login(new FormData(document.getElementById('login') as HTMLFormElement)))\r\n        }} method='post' action='/admin.php?w=login' name='adminlogin'>\r\n            <label>\r\n                username\r\n            <input name='username' />\r\n            </label>\r\n            <label>\r\n                password\r\n            <input type='password' name='password' />\r\n            </label>\r\n            <button type='submit'>Submit</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport function AdminView(props: { applications: any[] }) {\r\n    return (\r\n        <table>\r\n            <thead>\r\n                <tr>\r\n                    <th>Full Name</th>\r\n                    <th>Phone Number</th>\r\n                    <th>Email Address</th>\r\n                    <th>Cover Letter</th>\r\n                    <th>Passport</th>\r\n                    <th>Resume</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {props.applications.map(app => {\r\n                    return (\r\n                        <tr>\r\n                            <td>{`${app.firstName} ${app.lastName}`}</td>\r\n                            <td>{`${app.phone}`}</td>\r\n                            <td>{`${app.email}`}</td>\r\n                            <td>{`${app.coverLetter}`}</td>\r\n                            <td><img src={`${app.passport}`} alt={`${app.passport}`} /></td>\r\n                            <td><a href={`${app.resume}`}>${app.resume}</a></td>\r\n                        </tr>)\r\n                })}\r\n            </tbody>\r\n        </table>\r\n    )\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport { MyForm } from \"./components/form\";\nimport './App.css';\nimport library from './lib';\nimport { AdminView, Login } from './components/admin';\n\nclass App extends React.Component {\n  state = {\n    canApply: false,\n    isAdmin: false,\n    applications: [],\n    showAdminLogin: false\n  };\n\n  constructor(props: any) {\n    super(props)\n  }\n\n  check() {\n    //@ts-ignore\n    library.canApply().then(can => this.setState({ canApply: can }))\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Welcome to Adio Consulting Group\n          </p>\n          //@ts-ignore\n          {this.state.isAdmin ? null : <button onClick={() => { this.setState({ showAdminLogin: true }) }}>Admin Login</button>}\n          {this.state.showAdminLogin ? <Login /> : null}\n        </header>\n        {this.state.isAdmin ?\n          (<section>\n            <AdminView applications={this.state.applications} />\n            //@ts-ignore\n            <button onClick={() => library.getApplications().then(data => this.setState({ applications: data }))} >Reload</button>\n          </section>) : (\n            <section>\n              {this.state.canApply ? (\n                <MyForm onSubmit={() => this.check} />\n              ) : (\n                  <div>\n                    <p>Application Closed</p>\n                  </div>\n                )\n              }\n            </section>)}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from \"react-router-dom\";\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\n//@ts-ignore\nReactDOM.render(<BrowserRouter><App /></BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}